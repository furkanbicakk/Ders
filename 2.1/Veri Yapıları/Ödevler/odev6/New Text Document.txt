package odev6;

import java.util.HashSet;

class dugum{
    int içerik;

    public dugum(int içerik){
        this.içerik = içerik;
    }
}
public class yıgın {
    dugum dizi[];
    int es;
    public yıgın(int N){
        dizi = new dugum[N];
        es = 0;
    }

    boolean yıgınBos(){
        if (es == 0)
            return true;
        else
            return false;
    }
    
    void yerDegistir(int k, int yeni){
        int eski = dizi[k].içerik;
        dizi[k].içerik = yeni;
        if(eski>yeni){
            asagiIn(k);
        }
        else{
            yukarıCik(k);
        }
    }
    
    void yukarıCik(int no){
        int ustdal = (no-1)/2;
        while (ustdal >= 0 && dizi[ustdal].içerik < dizi[no].içerik){
            yerDegistir(ustdal,no);
            no = ustdal;
            ustdal = (no-1)/2;
        }
    }
    void asagiIn(int no){
        int sol = 2*no + 1;
        int sag = 2*no + 2;
        
        while ((sol<es && dizi[no].içerik < dizi[sol].içerik) || (sag<es && dizi[no].içerik < dizi[sag].içerik)) {  
            
            if (sag >= es || dizi[sol].içerik > dizi[sag].içerik) {
                yerDegistir(no, sol);
                no = sol;
            }
            else{
                yerDegistir(no, sag);
                no = sag;
            }
            sol = 2*no + 1;
            sag = 2*no + 2;
        }
    }
    void ekle(dugum yeni){
        es++;
        dizi[es-1] = yeni;
        yukarıCik(es-1);
    }
    
    dugum sil(){
        dugum tmp = dizi[0];
        dizi[0] = dizi[es-1];
        asagiIn(0);
        es--;
        return tmp;
    }
    

    boolean minheapmi(int dizix[]){
        boolean x = true;
        for (int i = 0; i < dizix.length; i++) {
            
            int sol = 2*i+1;
            int sag = 2*i+2;
            
            
            if (sol <= dizix.length-1 && (dizix[i] < dizix[sol]) && sag <= dizix.length-1 && (dizix[i] < dizix[sag])) {
                System.out.println("HEAP");
                  x = true;
            }
            else if(sol >= dizix.length){
                i = dizix.length;
            }
            else{
                x = false;
                i = dizix.length;
            }
            
             
        }

         return x;
         
        
    }
    
static void MaxHeapify(int arr[], int i, int n) 
    { 
        int l = 2*i + 1; 
        int r = 2*i + 2; 
        int largest = i; 
        if (l < n && arr[l] > arr[i]) 
            largest = l; 
        if (r < n && arr[r] > arr[largest]) 
            largest = r; 
        if (largest != i) 
        { 
            // swap arr[i] and arr[largest] 
            int temp = arr[i]; 
            arr[i] = arr[largest]; 
            arr[largest] = temp; 
            MaxHeapify(arr, largest, n); 
        } 
    } 
   
    // This function basically builds max heap 
    static void convertMaxHeap(int arr[], int n) 
    { 
        // Start from bottommost and rightmost 
        // internal mode and heapify all internal 
        // modes in bottom up way 
        for (int i = (n-2)/2; i >= 0; --i) 
            MaxHeapify(arr, i, n); 
    } 
   
    // A utility function to print a given array 
    // of given size 
    static void printArray(int arr[], int size) 
    { 
        for (int i = 0; i < size; ++i) 
            System.out.print(arr[i]+" "); 
    } 
    
    static void esitmi(int dizi[], int n){
        for (int i = 0; i < dizi.length; i++) {
            for (int j = i+1; j < dizi.length; j++) {
                if (dizi[i]+dizi[j] == n) {
                    System.out.println("TOPLAM MEVCUT VE SAYILAR : " + dizi[i] + "," + dizi[j]);
                }
            }
        }
        
    }
    static boolean areAnagram(String str1, String str2)  
{  
    // If two strings have different length  
    if (str1.length() != str2.length())  
    {  
        return false;  
    }  
  
    // To store the xor value  
    int value = 0;  
  
    for (int i = 0; i < str1.length(); i++)  
    {  
        value = value ^ (int) str1.charAt(i);  
        value = value ^ (int) str2.charAt(i);  
    }  
  
    return value == 0;  
  
}  
    
     static boolean isSubset(int arr1[], int arr2[], int m, int n) 
    { 
        HashSet<Integer> hset= new HashSet<>(); 
          
        // hset stores all the values of arr1 
        for(int i = 0; i < m; i++) 
        { 
            if(!hset.contains(arr1[i])) 
                hset.add(arr1[i]); 
        } 
              
        // loop to check if all elements of arr2 also 
        // lies in arr1 
        for(int i = 0; i < n; i++) 
        { 
            if(!hset.contains(arr2[i])) 
                return false; 
        } 
        return true; 
    } 
     void goster(){
         for (int i = 0; i < dizi.length; i++) {
             System.out.print(dizi[i].içerik);
         }
         System.out.println("");
     }
    
    public static void main(String[] args) {
        dugum d1 = new dugum(1);
        dugum d2 = new dugum(4);
        dugum d3 = new dugum(5);
        dugum d4 = new dugum(9);
        dugum d5 = new dugum(7);
        dugum d6 = new dugum(8);
        dugum d7 = new dugum(11);
        dugum d8 = new dugum(12);
        dugum d9 = new dugum(14);
        dugum d10 = new dugum(10);
        dugum d11 = new dugum(15);
        
        

        yıgın y = new yıgın(5);
        
        y.ekle(d1);
        y.ekle(d2);
        y.ekle(d3);
        y.ekle(d4);
        y.ekle(d5);
        
       
        int adizi [] = {1,3,5,7,8,9,11,12,13,15,16};
        System.out.println(y.minheapmi(adizi));
       
      /*  printArray(adizi,adizi.length);
        convertMaxHeap(adizi,adizi.length);
        System.out.println("------------------");
        printArray(adizi,adizi.length);*/
       //esitmi(adizi,20);
       
       
      /*  System.out.println(areAnagram("ilhan","ilahn"));
        
        int arr1[] = {11, 1, 13, 21, 3, 7}; 
        int arr2[] = {11, 3, 7, 1}; 
          
        int m = arr1.length; 
        int n = arr2.length; 
        
        System.out.println(isSubset(arr1, arr2, m, n));*/
         
       

    }
}

